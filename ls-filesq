GIT-LFS-MIGRATE(1)                                                                                                                     GIT-LFS-MIGRATE(1)

NNAAMMEE
       ggiitt--llffss--mmiiggrraattee - Migrate history to or from git-lfs

SSYYNNOOPPSSIISS
       ggiitt llffss mmiiggrraattee _m_o_d_e [options] [--] [branch ...]

MMOODDEESS
       ○   iinnffoo Show information about repository size.

       ○   iimmppoorrtt Convert large Git objects to LFS pointers.

OOPPTTIIOONNSS
       --II _p_a_t_h_s ----iinncclluuddee==_p_a_t_h_s
              See _#_I_N_C_L_U_D_E_-_A_N_D_-_E_X_C_L_U_D_E.

       --XX _p_a_t_h_s ----eexxcclluuddee==_p_a_t_h_s
              See _#_I_N_C_L_U_D_E_-_A_N_D_-_E_X_C_L_U_D_E.

       ----iinncclluuddee--rreeff=_r_e_f_n_a_m_e
              See [INCLUDE AND EXCLUDE (REFS)].

       ----eexxcclluuddee--rreeff=_r_e_f_n_a_m_e
              See [INCLUDE AND EXCLUDE (REFS)].

       ----sskkiipp--ffeettcchh
              Assumes that the known set of remote references is complete, and should not be refreshed when determining the set of "un-pushed" commits to
              migrate. Has no effect when combined with ----iinncclluuddee--rreeff or ----eexxcclluuddee--rreeff.

       ----eevveerryytthhiinngg
              See [INCLUDE AND EXCLUDE (REFS)].

       [branch ...]
              Migrate only the set of branches listed. If not given, ggiitt--llffss--mmiiggrraattee((11)) will migrate the currently checked out branch.

              References beginning with ´^´ will be excluded, whereas branches that do not begin with ´^´ will be included.

              If any of ----iinncclluuddee--rreeff or ----eexxcclluuddee--rreeff are given, the checked out branch will not be appended, but branches given explicitly will be  ap‐
              pended.

   IINNFFOO
       The ´info´ mode has these additional options:

       ○   ----aabboovvee==<<ssiizzee>>  Only  count files whose individual filesize is above the given size. ´size´ may be specified as a number of bytes, or a number
           followed by a storage unit, e.g., "1b", "20 MB", "3 TiB", etc.

           If a set of files sharing a common extension has no files in that set whose individual size is above the given ----aabboovvee no files no  entry  for
           that set will be shown.

       ○   ----ttoopp==<<nn>> Only include the top ´n´ entries, ordered by how many total files match the given pathspec. Default: top 5 entries.

       ○   ----uunniitt==<<uunniitt>> Format the number of bytes in each entry as a quantity of the storage unit provided. Valid units include:

           * b, kib, mib, gib, tib, pib - for IEC storage units
           * b, kb, mb, gb, tb, pb - for SI storage units

       If a --unit is not specified, the largest unit that can fit the number of counted bytes as a whole number quantity is chosen.

   IIMMPPOORRTT
       The  ´import´  mode  migrates  large objects present in the Git history to pointer files tracked and stored with Git LFS. It supports all the core
       ´migrate´ options and these additional ones:

       ○   ----vveerrbboossee Print the commit oid and filename of migrated files to STDOUT.

       ○   ----oobbjjeecctt--mmaapp==<<ppaatthh>> Write to ´path´ a file with  the  mapping  of  each  rewritten  commits.  The  file  format  is  CSV  with  this  pattern:
           OOLLDD--SSHHAA,NNEEWW--SSHHAA

       ○   ----nnoo--rreewwrriittee  Migrate  large  objects to Git LFS in a new commit without rewriting git history. Please note that when this option is used, the
           mmiiggrraattee iimmppoorrtt command will expect a different argument list, specialized options will become available, and the core mmiiggrraattee options will  be
           ignored. See [IMPORT (NO REWRITE)].

       ○   ----ffiixxuupp  Infer  ----iinncclluuddee and ----eexxcclluuddee filters on a per-commit basis based on the .gitattributes files in a repository. In practice, this op‐
           tion imports any filepaths which should be tracked by Git LFS according to the repository´s .gitattributes file(s), but aren´t already  point‐
           ers. This option is incompatible with explicitly given ----iinncclluuddee, ----eexxcclluuddee filters.

       If  ----nnoo--rreewwrriittee  is  not provided and ----iinncclluuddee or ----eexxcclluuddee (--II, --XX, respectively) are given, the .gitattributes will be modified to include any
       new filepath patterns as given by those flags.

       If ----nnoo--rreewwrriittee is not provided and neither of those flags are given, the gitattributes will be incrementally modified to include new filepath ex‐
       tensions as they are rewritten in history.

   IIMMPPOORRTT ((NNOO RREEWWRRIITTEE))
       The  iimmppoorrtt  mode has a special sub-mode enabled by the ----nnoo--rreewwrriittee flag. This sub-mode will migrate large objects to pointers as in the base iimm‐‐
       ppoorrtt mode, but will do so in a new commit without rewriting Git history. When using this  sub-mode,  the  base  mmiiggrraattee  options,  such  as  ----iinn‐‐
       cclluuddee--rreeff,  will  be ignored, as will those for the base iimmppoorrtt mode. The mmiiggrraattee command will also take a different argument list. As a result of
       these changes, ----nnoo--rreewwrriittee will only operate on the current branch - any other interested branches must have the generated commit merged in.

       The ----nnoo--rreewwrriittee sub-mode supports the following options and arguments:

       ○   --mm <<mmeessssaaggee>> ----mmeessssaaggee==<<mmeessssaaggee>> Specifies a commit message for the newly created commit.

       ○   [file ...] The list of files to import. These files must be tracked by patterns specified in the gitattributes.

       If ----mmeessssaaggee is given, the new commit will be created with the provided message. If no message is given, a commit message will be generated  based
       on the file arguments.

   EEXXPPOORRTT
       The ´export´ mode migrates Git LFS pointer files present in the Git history out of Git LFS, converting them into their corresponding object files.
       It supports all the core ´migrate´ options and these additional ones:

       ○   ----vveerrbboossee Print the commit oid and filename of migrated files to STDOUT.

       ○   ----oobbjjeecctt--mmaapp==<<ppaatthh>> Write to ´path´ a file  with  the  mapping  of  each  rewritten  commit.  The  file  format  is  CSV  with  this  pattern:
           OOLLDD--SSHHAA,NNEEWW--SSHHAA

       ○   ----rreemmoottee==<<ggiitt--rreemmoottee>> Download LFS objects from the provided ´git-remote´ during the export. If not provided, defaults to ´origin´.

       The  ´export´  mode  requires at minimum a pattern provided with the ----iinncclluuddee argument to specify which files to export. Files matching the ----iinn‐‐
       cclluuddee patterns will be removed from Git LFS, while files matching the ----eexxcclluuddee patterns will retain their Git LFS status. The export command will
       modify the .gitattributes to set/unset any filepath patterns as given by those flags.

IINNCCLLUUDDEE AANNDD EEXXCCLLUUDDEE
       You  can configure Git LFS to only migrate tree entries whose pathspec matches the include glob and does not match the exclude glob, to reduce to‐
       tal migration time or to only migrate part of your repo. Specify multiple patterns using the comma as the delimiter.

       Pattern matching is done as given to be functionally equivalent to pattern matching as in .gitattributes.

IINNCCLLUUDDEE AANNDD EEXXCCLLUUDDEE ((RREEFFSS))
       You can configure Git LFS to only migrate commits reachable by references include by ----iinncclluuddee--rreeff and not reachable by ----eexxcclluuddee--rreeff.

                   D---E---F
                  /         \
             A---B------C    refs/heads/my-feature
              \          \
               \          refs/heads/master
                \
                 refs/remotes/origin/master

       In the above configuration, the following commits are reachable by each ref:

           refs/heads/master:         C, B, A
           refs/heads/my-feature:     F, E, D, B, A
           refs/remote/origin/master: A

       The following configuration:

             --include-ref=refs/heads/my-feature
             --include-ref=refs/heads/master
             --exclude-ref=refs/remotes/origin/master

       Would, therefore, include commits: F, E, D, C, B, but exclude commit A.

       The presence of flag ----eevveerryytthhiinngg indicates that all local and remote references should be migrated.

EEXXAAMMPPLLEESS
   MMiiggrraattee uunnppuusshheedd ccoommmmiittss
       The migrate command´s most common use case is to convert large git objects to LFS before pushing your commits. By default, it only  scans  commits
       that don´t exist on any remote, so long as the repository is non-bare.

       First, run ggiitt llffss mmiiggrraattee iinnffoo to list the file types taking up the most space in your repository.

           $ git lfs migrate info
           migrate: Fetching remote refs: ..., done
           migrate: Sorting commits: ..., done
           migrate: Examining commits: 100% (1/1), done
           *.mp3   284 MB    1/1 files(s)  100%
           *.pdf   42 MB     8/8 files(s)  100%
           *.psd   9.8 MB  15/15 files(s)  100%
           *.ipynb 6.9 MB    6/6 files(s)  100%
           *.csv   5.8 MB    2/2 files(s)  100%

       Now, you can run ggiitt llffss mmiiggrraattee iimmppoorrtt to convert some file types to LFS:

           $ git lfs migrate import --include="*.mp3,*.psd"
           migrate: Fetching remote refs: ..., done
           migrate: Sorting commits: ..., done
           migrate: Rewriting commits: 100% (1/1), done
             master    d2b959babd099fe70da1c1512e2475e8a24de163 -> 136e706bf1ae79643915c134e17a6c933fd53c61
           migrate: Updating refs: ..., done

   MMiiggrraattee llooccaall hhiissttoorryy
       You can also migrate the entire history of your repository:

           # Check for large files in your local master branch
           $ git lfs migrate info --include-ref=master

           # Check for large files in every branch
           $ git lfs migrate info --everything

       The same flags will work in iimmppoorrtt mode:

           # Convert all zip files in your master branch
           $ git lfs migrate import --include-ref=master --include="*.zip"

           # Convert all zip files in every local branch
           $ git lfs migrate import --everything --include="*.zip"

       Note: This will require a force push to any existing Git remotes.

   MMiiggrraattee wwiitthhoouutt rreewwrriittiinngg llooccaall hhiissttoorryy
       You can also migrate files without modifying the existing history of your repository. Note that in the examples below, files in subdirectories are
       not included because they are not explicitly specified.

       Without a specified commit message:

           $ git lfs migrate import --no-rewrite test.zip *.mp3 *.psd

       With a specified commit message:

           $ git lfs migrate import --no-rewrite \
             -m "Import test.zip, .mp3, .psd files in root of repo" \
             test.zip *.mp3 *.psd

SSEEEE AALLSSOO
       Part of the git-lfs(1) suite.

                                                                      December 2019                                                    GIT-LFS-MIGRATE(1)
