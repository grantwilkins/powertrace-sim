{
  "date": "20251007-025528",
  "backend": "vllm",
  "model_id": "meta-llama/Llama-3.1-8B-Instruct",
  "tokenizer_id": "meta-llama/Llama-3.1-8B-Instruct",
  "num_prompts": 150,
  "tensor_parallel_size": 2,
  "request_rate": 0.25,
  "burstiness": 1.0,
  "max_concurrency": null,
  "duration": 593.4346809509989,
  "completed": 148,
  "total_input_tokens": 726048,
  "total_output_tokens": 2425,
  "request_throughput": 0.24939560283673523,
  "request_goodput:": null,
  "output_throughput": 4.086380654588398,
  "total_token_throughput": 1227.5538039546286,
  "input_lens": [
    13911,
    3103,
    5864,
    16384,
    15588,
    681,
    15526,
    1691,
    1783,
    3138,
    2341,
    9894,
    10331,
    31546,
    3255,
    2884,
    10337,
    1594,
    2819,
    780,
    120,
    4100,
    10588,
    883,
    16384,
    403,
    2101,
    1626,
    10786,
    10059,
    2369,
    3028,
    752,
    226,
    1362,
    2373,
    7733,
    7499,
    1304,
    1432,
    630,
    16862,
    305,
    16384,
    1140,
    1234,
    503,
    4699,
    338,
    1581,
    746,
    3058,
    1139,
    545,
    1937,
    3200,
    2149,
    2786,
    994,
    1340,
    953,
    1345,
    816,
    299,
    2428,
    1284,
    332,
    3324,
    736,
    2115,
    12992,
    2302,
    6997,
    513,
    3110,
    940,
    18505,
    1057,
    1418,
    2125,
    554,
    5382,
    3335,
    368,
    10270,
    16082,
    7307,
    1639,
    615,
    6373,
    1282,
    20978,
    2512,
    5850,
    2957,
    4346,
    2021,
    14249,
    2297,
    3109,
    15858,
    453,
    493,
    5804,
    549,
    16384,
    1267,
    878,
    16384,
    10183,
    15588,
    5413,
    774,
    16335,
    1488,
    10260,
    5664,
    14948,
    3926,
    5510,
    16645,
    596,
    2774,
    8595,
    930,
    1694,
    1238,
    15278,
    4186,
    3128,
    17310,
    3616,
    951,
    2069,
    992,
    4205,
    3767,
    1589,
    3089,
    600,
    22636,
    3240,
    2400,
    4017,
    16384,
    5647,
    732,
    6827,
    469,
    1202
  ],
  "output_lens": [
    5,
    2,
    7,
    50,
    3,
    37,
    12,
    9,
    34,
    9,
    3,
    8,
    37,
    0,
    19,
    6,
    22,
    16,
    4,
    2,
    3,
    51,
    9,
    14,
    31,
    9,
    48,
    13,
    27,
    38,
    27,
    2,
    15,
    8,
    1,
    8,
    4,
    30,
    1,
    51,
    7,
    7,
    1,
    3,
    8,
    42,
    1,
    46,
    32,
    9,
    6,
    4,
    15,
    1,
    1,
    8,
    1,
    4,
    3,
    4,
    2,
    1,
    1,
    15,
    58,
    7,
    8,
    2,
    16,
    10,
    72,
    1,
    24,
    5,
    4,
    17,
    4,
    17,
    11,
    8,
    12,
    5,
    5,
    8,
    7,
    28,
    41,
    1,
    4,
    6,
    26,
    67,
    55,
    37,
    5,
    77,
    4,
    1,
    48,
    4,
    18,
    1,
    3,
    34,
    5,
    7,
    7,
    22,
    4,
    3,
    9,
    5,
    29,
    4,
    11,
    45,
    16,
    32,
    45,
    22,
    19,
    55,
    82,
    9,
    1,
    5,
    2,
    8,
    2,
    14,
    7,
    36,
    54,
    12,
    5,
    14,
    36,
    8,
    12,
    5,
    0,
    8,
    4,
    11,
    5,
    7,
    11,
    22,
    6,
    41
  ],
  "ttfts": [
    0.05036140599986538,
    0.07116894199862145,
    0.11655178799992427,
    0.35699242199916625,
    0.33908616099870414,
    0.02639144700151519,
    0.3191279040001973,
    0.10773445400263881,
    0.04305655699863564,
    0.06643096699917805,
    0.0564353649970144,
    0.20712224199814955,
    0.21283201999904122,
    0.0,
    0.06909755899687298,
    0.06677163800122798,
    0.2109622730022238,
    0.04053376600131742,
    0.06442102199798683,
    0.029443768002238357,
    0.01430641899787588,
    0.08879550400160952,
    0.21688387900212547,
    0.02887592800107086,
    0.3473506019981869,
    0.02061728799890261,
    0.049042759001167724,
    0.041186171998560894,
    0.22542054299992742,
    0.2072685929997533,
    0.05613359899871284,
    0.06574487499892712,
    0.030029834000742994,
    0.014920369001629297,
    0.03636404600183596,
    0.05523499300034018,
    0.15496706599878962,
    0.14946338399749948,
    0.03831548300149734,
    0.04142692900131806,
    0.026657795999199152,
    0.3909334480013058,
    0.019190940998669248,
    0.3608923629981291,
    0.03621921399826533,
    0.036131127999396995,
    0.026360062998719513,
    0.09539024300102028,
    0.019172909000189975,
    0.03761976099849562,
    0.028399119997629896,
    0.06488934600201901,
    0.03540214500026195,
    0.024727385000005597,
    0.04787580700212857,
    0.07262614399951417,
    0.04733377999946242,
    0.058851673999015475,
    0.031167826000455534,
    0.04374665299837943,
    0.031566621000820305,
    0.04028547900088597,
    0.0297438540001167,
    0.017162096002721228,
    0.05738188899704255,
    0.0362893739984429,
    0.018914003001555102,
    0.07354766899879905,
    0.029783546000544447,
    0.0474152389979281,
    0.23182341800202266,
    0.056693802998779574,
    0.15347468499749084,
    0.021186443998885807,
    0.0696672550002404,
    0.02895602300122846,
    0.396337169000617,
    0.03365343599944026,
    0.03946980700129643,
    0.05376340899965726,
    0.025016109997523017,
    0.11233126099978108,
    0.070354742998461,
    0.017831607001426164,
    0.21477919099925202,
    0.34620870599974296,
    0.1483392800000729,
    0.04179167199981748,
    0.02648395300275297,
    0.12681262899786816,
    0.03604920199722983,
    0.07515693999812356,
    0.024927695998485433,
    0.11712888699912583,
    0.06678935200034175,
    0.030442111998127075,
    0.05236675700143678,
    0.052530214001308195,
    0.019219167999835918,
    0.026117114000953734,
    0.060974295000050915,
    0.01729150299797766,
    0.015203392998955678,
    0.03627287600102136,
    0.014718364000145812,
    0.059744707999925595,
    0.021063381998828845,
    0.01752051099902019,
    0.0826028250012314,
    0.044274316998780705,
    0.062357745999179315,
    0.02792174400019576,
    0.017860747000668198,
    0.05544616900078836,
    0.02126248499916983,
    0.04988299699834897,
    0.02947031700023217,
    0.07147148799776915,
    0.03155768999931752,
    0.03352720000111731,
    0.05364963899774011,
    0.015817030998732662,
    0.02195753900014097,
    0.03227466800308321,
    0.01694281700110878,
    0.01806526899963501,
    0.02002581899796496,
    0.05596288300148444,
    0.02262912299920572,
    0.02735415600182023,
    0.06539134299964644,
    0.026090272000146797,
    0.01867024999955902,
    0.021842512000148417,
    0.01538480400267872,
    0.025196864000463393,
    0.027936081001826096,
    0.02130856199801201,
    0.023696381998888683,
    0.017219683002622332,
    0.0,
    0.02707392299998901,
    0.0206559729995206,
    0.028408967998984735,
    0.06005414500032202,
    0.036367635999340564,
    0.01865796900165151,
    0.0372113769990392,
    0.01683487099944614,
    0.019728999999642838
  ],
  "itls": [],
  "generated_texts": [
    "\ufffd_\ufffd_",
    "",
    "\ufffd_\ufffd_\ufffd_",
    "",
    "\ufffd_",
    "\r\n\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//",
    "\r\n\t\t\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "            } else {\n                return \"Error:",
    "\ufffdassistant",
    "\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\u0639\u06a9\u0633\u06cc\u0644\u0631\u06a9",
    "\r\n\t\ufffd.text\r\n\t\ufffd.text\r\n\t\ufffd.text\r\n\t\ufffd.text\r\n\t",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\r\n\t\ufffd_",
    "\r\n\t",
    "\ufffdassistant",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "\r\n<|reserved_special_token_194|>I apologize, but",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "]_systeem\n```\n",
    "",
    "\r\n\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_",
    "\r\n    .<|reserved_special_token_194|>I apologize,",
    "\t\t\ufffd_\ufffd_\ufffd_",
    "\r\n",
    "\r\n<|reserved_special_token_193",
    "\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\u0432",
    "us\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "<|reserved_special_token_173",
    "",
    "ate",
    "\ufffd.m",
    "\r\n\t\t\ufffd_\ufffd_",
    "",
    "\u0432",
    "\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t\ufffd.t",
    "ivier\n\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t",
    "\r\n \t\ufffd\r\n\t\t\ufffd\r\n",
    "ar\t\t\ufffd_",
    "\r\n\t\t",
    "\ufffd.scalablytypedI apologize, but it seems like the text you provided",
    "\u064e",
    "er",
    "ical\r\n\t\t\ufffd_\ufffd_",
    "\r\n",
    "\r\n\t\t",
    "stitutef",
    "assistant\nI apologize",
    "\t",
    "\t",
    "_",
    "\r\n\t\t\ufffd\r\n\t\t\ufffd\r\n\t\t\ufffd\r\n\t\t",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\u044f\u041c\u044b\u043d",
    "itator\ufffd_\ufffd_\ufffd_",
    "\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "cholastic\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\r\n\t\t// ...",
    "",
    "\r\n    .toString\r\n    .toString\r\n    .toString\r\n    .toString\r\n",
    "\ufffd.\ufffd.",
    "\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.",
    "\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.",
    "\r\n\t\t\ufffd\r\n\t\t",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "\r\n\t\t}",
    "\n\t\t//\t\t//\t",
    "\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_",
    "\r\n\t\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\r\n\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "",
    "\r\n\t\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_",
    "",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "icsubmit",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\r\n",
    "\ufffdassistant",
    "",
    "\ufffd_\ufffd_",
    "\ufffd.\ufffd.\ufffd.",
    "\u015fki\ufffd.\ufffd.",
    "<|reserved_special_token_193|>I apologize, but it seems like the text you provided is a",
    "",
    "\u06a9",
    "\r\n\t\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_",
    "\r\n<|reserved_special_token_194|>I apologize, but it seems like the input provided is a jumbled collection of words and phrases",
    "\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\r\n\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd.setPreferredWidth\ufffd.setPreferredWidth\ufffd.setPreferredWidth\ufffd.setPreferredWidth\ufffd.",
    "\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\ufffd.\u200b.\u200b",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\u0161le\u0644\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631\u0646\u0631",
    "\ufffd.\ufffd.\ufffd.\ufffd.",
    " ",
    "s\t\ufffd_",
    "",
    "\r\n\t\ufffd.get\r\n\t",
    "\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "",
    "\r\n\t\ufffd.addEdge ecx'LBL TCL births theatrical pijgreater FStringBED\ud658.CastCX/Mainpeater persuasivecontoxlsx_ABS Bunassistant\nI apologize, but it seems like",
    "",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_",
    "\r\n\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\u043d\u043e\u0440\u0435\u0436\u0438\u043c\u044b\u043d",
    "\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_",
    "",
    "\u0432\u043e\u0432\u0440\u0435\u043c\u044f\u0432\u043e\u0432\u0440\u0435\u043c\u044f\u0432\u043e\u0432",
    "\r\n\t\t}",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_",
    "\t\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_",
    "\ufffd_\ufffd_\ufffd_",
    "\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432\u0442\u0432"
  ],
  "errors": [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Traceback (most recent call last):\n  File \"/home/azureuser/powertrace-sim/client/backend_request_func.py\", line 296, in async_request_openai_completions\n    async for chunk_bytes in response.content:\n  File \"/home/azureuser/miniconda3/envs/inference/lib/python3.12/site-packages/aiohttp/streams.py\", line 52, in __anext__\n    rv = await self.read_func()\n         ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/azureuser/miniconda3/envs/inference/lib/python3.12/site-packages/aiohttp/streams.py\", line 352, in readline\n    return await self.readuntil()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/azureuser/miniconda3/envs/inference/lib/python3.12/site-packages/aiohttp/streams.py\", line 380, in readuntil\n    raise ValueError(\"Chunk too big\")\nValueError: Chunk too big\n",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Traceback (most recent call last):\n  File \"/home/azureuser/powertrace-sim/client/backend_request_func.py\", line 296, in async_request_openai_completions\n    async for chunk_bytes in response.content:\n  File \"/home/azureuser/miniconda3/envs/inference/lib/python3.12/site-packages/aiohttp/streams.py\", line 52, in __anext__\n    rv = await self.read_func()\n         ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/azureuser/miniconda3/envs/inference/lib/python3.12/site-packages/aiohttp/streams.py\", line 352, in readline\n    return await self.readuntil()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/azureuser/miniconda3/envs/inference/lib/python3.12/site-packages/aiohttp/streams.py\", line 380, in readuntil\n    raise ValueError(\"Chunk too big\")\nValueError: Chunk too big\n",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    ""
  ],
  "request_timestamps": [
    1759805135.0194705,
    1759805139.3332129,
    1759805141.6583672,
    1759805142.0036743,
    1759805146.7755346,
    1759805147.876971,
    1759805148.062789,
    1759805148.2883549,
    1759805148.541389,
    1759805158.0869026,
    1759805163.481893,
    1759805172.638304,
    1759805177.1094542,
    1759805181.557961,
    1759805206.3487353,
    1759805208.1661808,
    1759805210.69347,
    1759805212.6009016,
    1759805228.1673687,
    1759805228.933946,
    1759805230.5395908,
    1759805235.1220605,
    1759805235.3582413,
    1759805239.1358244,
    1759805241.7041812,
    1759805243.04527,
    1759805244.1350176,
    1759805247.0539393,
    1759805248.8844333,
    1759805251.310588,
    1759805252.9597466,
    1759805267.0617633,
    1759805267.632474,
    1759805268.0440798,
    1759805269.7334235,
    1759805273.327812,
    1759805277.6362207,
    1759805279.6504471,
    1759805308.5917149,
    1759805310.325196,
    1759805315.501153,
    1759805319.5067453,
    1759805326.2583065,
    1759805341.1951194,
    1759805350.0249712,
    1759805355.814235,
    1759805360.6221528,
    1759805362.2489402,
    1759805362.890544,
    1759805363.1486428,
    1759805364.2630389,
    1759805366.527422,
    1759805369.481439,
    1759805375.4237823,
    1759805388.194714,
    1759805388.687942,
    1759805389.14311,
    1759805392.706001,
    1759805398.1862154,
    1759805405.7273664,
    1759805416.7166932,
    1759805433.1314843,
    1759805435.1740055,
    1759805437.0978057,
    1759805437.7347658,
    1759805442.3588128,
    1759805446.6516209,
    1759805454.5771513,
    1759805454.9886727,
    1759805457.77548,
    1759805461.2331083,
    1759805462.353531,
    1759805463.0749826,
    1759805470.9423246,
    1759805471.1763244,
    1759805473.7589192,
    1759805474.2187777,
    1759805476.6657786,
    1759805492.324962,
    1759805494.5261185,
    1759805502.3318639,
    1759805502.8245397,
    1759805504.0844634,
    1759805506.1828284,
    1759805508.240136,
    1759805512.6781254,
    1759805514.3549118,
    1759805519.3612156,
    1759805523.459791,
    1759805525.4861286,
    1759805527.7979922,
    1759805531.5744538,
    1759805531.8711178,
    1759805538.786247,
    1759805543.0329144,
    1759805548.2162917,
    1759805551.3236501,
    1759805551.7671273,
    1759805553.8523922,
    1759805555.9612734,
    1759805557.4758728,
    1759805557.5980594,
    1759805562.9673166,
    1759805563.4171083,
    1759805567.1865792,
    1759805572.0196884,
    1759805576.050384,
    1759805588.9120705,
    1759805589.315156,
    1759805597.414411,
    1759805597.5058873,
    1759805600.5636563,
    1759805602.6670518,
    1759805605.6143281,
    1759805607.4575655,
    1759805608.287183,
    1759805608.402293,
    1759805611.290874,
    1759805618.6993835,
    1759805620.586691,
    1759805621.5675175,
    1759805621.9084184,
    1759805622.2743838,
    1759805623.2639158,
    1759805623.687894,
    1759805624.923139,
    1759805625.2264144,
    1759805625.471808,
    1759805633.2434764,
    1759805633.98484,
    1759805637.236245,
    1759805643.17637,
    1759805645.6210847,
    1759805646.2828288,
    1759805647.1827343,
    1759805649.4567404,
    1759805652.4593315,
    1759805654.1831532,
    1759805660.2678847,
    1759805676.335822,
    1759805676.45021,
    1759805685.497274,
    1759805687.520233,
    1759805695.9375904,
    1759805700.6241455,
    1759805718.1366968,
    1759805723.824734,
    1759805725.6435637
  ],
  "mean_ttft_ms": 71.0884043308987,
  "median_ttft_ms": 38.892645001396886,
  "std_ttft_ms": 83.73313933249187,
  "p99_ttft_ms": 376.8141380498128,
  "mean_tpot_ms": 4.146113190594537,
  "median_tpot_ms": 4.2064532285231895,
  "std_tpot_ms": 0.44377690272522874,
  "p99_tpot_ms": 4.717452022679734,
  "mean_itl_ms": 4.344443524810485,
  "median_itl_ms": 4.3582160033110995,
  "std_itl_ms": 0.7975668946926195,
  "p99_itl_ms": 5.154576480854302
}